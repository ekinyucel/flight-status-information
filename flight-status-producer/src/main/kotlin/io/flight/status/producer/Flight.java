/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.flight.status.producer;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** A flight object */
@org.apache.avro.specific.AvroGenerated
public class Flight extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1034506477887594371L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Flight\",\"namespace\":\"io.flight.status.api\",\"doc\":\"A flight object\",\"fields\":[{\"name\":\"lastUpdatedAt\",\"type\":[\"null\",\"string\"],\"doc\":\"The last updated date of the flight information\"},{\"name\":\"actualLandingTime\",\"type\":[\"null\",\"string\"],\"doc\":\"The actual landing time of the flight\"},{\"name\":\"aircraftRegistration\",\"type\":[\"null\",\"string\"],\"doc\":\"The aircraft registration number\"},{\"name\":\"AircraftType\",\"type\":{\"type\":\"record\",\"name\":\"AircraftType\",\"doc\":\"A record for aircraft type\",\"fields\":[{\"name\":\"iataMain\",\"type\":[\"null\",\"string\"],\"doc\":\"iata code\"},{\"name\":\"iataSub\",\"type\":[\"null\",\"string\"],\"doc\":\"iata code\"}]},\"doc\":\"The aircraft type\"},{\"name\":\"estimatedLandingTime\",\"type\":[\"null\",\"string\"],\"doc\":\"The estimated landing time\"},{\"name\":\"flightDirection\",\"type\":[\"null\",\"string\"],\"doc\":\"The direction of flight\"},{\"name\":\"flightName\",\"type\":[\"null\",\"string\"],\"doc\":\"The name of the flight\"},{\"name\":\"gate\",\"type\":[\"null\",\"string\"],\"doc\":\"The gate information\"},{\"name\":\"pier\",\"type\":[\"null\",\"string\"],\"doc\":\"The pier information\"},{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"doc\":\"The id of the flight status record\"},{\"name\":\"isOperationalFlight\",\"type\":[\"null\",\"string\"],\"doc\":\"The indicator for the flight type\"},{\"name\":\"mainFlight\",\"type\":[\"null\",\"string\"],\"doc\":\"The main flight information\"},{\"name\":\"prefixIATA\",\"type\":[\"null\",\"string\"],\"doc\":\"The iata number\"},{\"name\":\"airlineCode\",\"type\":\"int\",\"doc\":\"The airline code\"},{\"name\":\"route\",\"type\":{\"type\":\"record\",\"name\":\"Route\",\"doc\":\"A record for route type\",\"fields\":[{\"name\":\"destinations\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"doc\":\"The destination information\"},{\"name\":\"eu\",\"type\":[\"null\",\"string\"],\"doc\":\"An indicator for whether the route is within EU or not\"},{\"name\":\"visa\",\"type\":[\"null\",\"string\"],\"doc\":\"An indicator to check whether the route is required to have a visa or not\"}]},\"doc\":\"The route information\"},{\"name\":\"scheduleDateTime\",\"type\":[\"null\",\"string\"],\"doc\":\"The scheduled date time information\"},{\"name\":\"scheduleDate\",\"type\":[\"null\",\"string\"],\"doc\":\"The scheduled date information\"},{\"name\":\"scheduleTime\",\"type\":[\"null\",\"string\"],\"doc\":\"The scheduled time information\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Flight> ENCODER =
      new BinaryMessageEncoder<Flight>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Flight> DECODER =
      new BinaryMessageDecoder<Flight>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Flight> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Flight> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Flight> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Flight>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Flight to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Flight from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Flight instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Flight fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The last updated date of the flight information */
   private java.lang.CharSequence lastUpdatedAt;
  /** The actual landing time of the flight */
   private java.lang.CharSequence actualLandingTime;
  /** The aircraft registration number */
   private java.lang.CharSequence aircraftRegistration;
  /** The aircraft type */
   private io.flight.status.producer.AircraftType AircraftType;
  /** The estimated landing time */
   private java.lang.CharSequence estimatedLandingTime;
  /** The direction of flight */
   private java.lang.CharSequence flightDirection;
  /** The name of the flight */
   private java.lang.CharSequence flightName;
  /** The gate information */
   private java.lang.CharSequence gate;
  /** The pier information */
   private java.lang.CharSequence pier;
  /** The id of the flight status record */
   private java.lang.CharSequence id;
  /** The indicator for the flight type */
   private java.lang.CharSequence isOperationalFlight;
  /** The main flight information */
   private java.lang.CharSequence mainFlight;
  /** The iata number */
   private java.lang.CharSequence prefixIATA;
  /** The airline code */
   private int airlineCode;
  /** The route information */
   private io.flight.status.api.Route route;
  /** The scheduled date time information */
   private java.lang.CharSequence scheduleDateTime;
  /** The scheduled date information */
   private java.lang.CharSequence scheduleDate;
  /** The scheduled time information */
   private java.lang.CharSequence scheduleTime;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Flight() {}

  /**
   * All-args constructor.
   * @param lastUpdatedAt The last updated date of the flight information
   * @param actualLandingTime The actual landing time of the flight
   * @param aircraftRegistration The aircraft registration number
   * @param AircraftType The aircraft type
   * @param estimatedLandingTime The estimated landing time
   * @param flightDirection The direction of flight
   * @param flightName The name of the flight
   * @param gate The gate information
   * @param pier The pier information
   * @param id The id of the flight status record
   * @param isOperationalFlight The indicator for the flight type
   * @param mainFlight The main flight information
   * @param prefixIATA The iata number
   * @param airlineCode The airline code
   * @param route The route information
   * @param scheduleDateTime The scheduled date time information
   * @param scheduleDate The scheduled date information
   * @param scheduleTime The scheduled time information
   */
  public Flight(java.lang.CharSequence lastUpdatedAt, java.lang.CharSequence actualLandingTime, java.lang.CharSequence aircraftRegistration, io.flight.status.producer.AircraftType AircraftType, java.lang.CharSequence estimatedLandingTime, java.lang.CharSequence flightDirection, java.lang.CharSequence flightName, java.lang.CharSequence gate, java.lang.CharSequence pier, java.lang.CharSequence id, java.lang.CharSequence isOperationalFlight, java.lang.CharSequence mainFlight, java.lang.CharSequence prefixIATA, java.lang.Integer airlineCode, io.flight.status.api.Route route, java.lang.CharSequence scheduleDateTime, java.lang.CharSequence scheduleDate, java.lang.CharSequence scheduleTime) {
    this.lastUpdatedAt = lastUpdatedAt;
    this.actualLandingTime = actualLandingTime;
    this.aircraftRegistration = aircraftRegistration;
    this.AircraftType = AircraftType;
    this.estimatedLandingTime = estimatedLandingTime;
    this.flightDirection = flightDirection;
    this.flightName = flightName;
    this.gate = gate;
    this.pier = pier;
    this.id = id;
    this.isOperationalFlight = isOperationalFlight;
    this.mainFlight = mainFlight;
    this.prefixIATA = prefixIATA;
    this.airlineCode = airlineCode;
    this.route = route;
    this.scheduleDateTime = scheduleDateTime;
    this.scheduleDate = scheduleDate;
    this.scheduleTime = scheduleTime;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return lastUpdatedAt;
    case 1: return actualLandingTime;
    case 2: return aircraftRegistration;
    case 3: return AircraftType;
    case 4: return estimatedLandingTime;
    case 5: return flightDirection;
    case 6: return flightName;
    case 7: return gate;
    case 8: return pier;
    case 9: return id;
    case 10: return isOperationalFlight;
    case 11: return mainFlight;
    case 12: return prefixIATA;
    case 13: return airlineCode;
    case 14: return route;
    case 15: return scheduleDateTime;
    case 16: return scheduleDate;
    case 17: return scheduleTime;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: lastUpdatedAt = (java.lang.CharSequence)value$; break;
    case 1: actualLandingTime = (java.lang.CharSequence)value$; break;
    case 2: aircraftRegistration = (java.lang.CharSequence)value$; break;
    case 3: AircraftType = (io.flight.status.producer.AircraftType)value$; break;
    case 4: estimatedLandingTime = (java.lang.CharSequence)value$; break;
    case 5: flightDirection = (java.lang.CharSequence)value$; break;
    case 6: flightName = (java.lang.CharSequence)value$; break;
    case 7: gate = (java.lang.CharSequence)value$; break;
    case 8: pier = (java.lang.CharSequence)value$; break;
    case 9: id = (java.lang.CharSequence)value$; break;
    case 10: isOperationalFlight = (java.lang.CharSequence)value$; break;
    case 11: mainFlight = (java.lang.CharSequence)value$; break;
    case 12: prefixIATA = (java.lang.CharSequence)value$; break;
    case 13: airlineCode = (java.lang.Integer)value$; break;
    case 14: route = (io.flight.status.api.Route)value$; break;
    case 15: scheduleDateTime = (java.lang.CharSequence)value$; break;
    case 16: scheduleDate = (java.lang.CharSequence)value$; break;
    case 17: scheduleTime = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'lastUpdatedAt' field.
   * @return The last updated date of the flight information
   */
  public java.lang.CharSequence getLastUpdatedAt() {
    return lastUpdatedAt;
  }


  /**
   * Sets the value of the 'lastUpdatedAt' field.
   * The last updated date of the flight information
   * @param value the value to set.
   */
  public void setLastUpdatedAt(java.lang.CharSequence value) {
    this.lastUpdatedAt = value;
  }

  /**
   * Gets the value of the 'actualLandingTime' field.
   * @return The actual landing time of the flight
   */
  public java.lang.CharSequence getActualLandingTime() {
    return actualLandingTime;
  }


  /**
   * Sets the value of the 'actualLandingTime' field.
   * The actual landing time of the flight
   * @param value the value to set.
   */
  public void setActualLandingTime(java.lang.CharSequence value) {
    this.actualLandingTime = value;
  }

  /**
   * Gets the value of the 'aircraftRegistration' field.
   * @return The aircraft registration number
   */
  public java.lang.CharSequence getAircraftRegistration() {
    return aircraftRegistration;
  }


  /**
   * Sets the value of the 'aircraftRegistration' field.
   * The aircraft registration number
   * @param value the value to set.
   */
  public void setAircraftRegistration(java.lang.CharSequence value) {
    this.aircraftRegistration = value;
  }

  /**
   * Gets the value of the 'AircraftType' field.
   * @return The aircraft type
   */
  public io.flight.status.producer.AircraftType getAircraftType() {
    return AircraftType;
  }


  /**
   * Sets the value of the 'AircraftType' field.
   * The aircraft type
   * @param value the value to set.
   */
  public void setAircraftType(io.flight.status.producer.AircraftType value) {
    this.AircraftType = value;
  }

  /**
   * Gets the value of the 'estimatedLandingTime' field.
   * @return The estimated landing time
   */
  public java.lang.CharSequence getEstimatedLandingTime() {
    return estimatedLandingTime;
  }


  /**
   * Sets the value of the 'estimatedLandingTime' field.
   * The estimated landing time
   * @param value the value to set.
   */
  public void setEstimatedLandingTime(java.lang.CharSequence value) {
    this.estimatedLandingTime = value;
  }

  /**
   * Gets the value of the 'flightDirection' field.
   * @return The direction of flight
   */
  public java.lang.CharSequence getFlightDirection() {
    return flightDirection;
  }


  /**
   * Sets the value of the 'flightDirection' field.
   * The direction of flight
   * @param value the value to set.
   */
  public void setFlightDirection(java.lang.CharSequence value) {
    this.flightDirection = value;
  }

  /**
   * Gets the value of the 'flightName' field.
   * @return The name of the flight
   */
  public java.lang.CharSequence getFlightName() {
    return flightName;
  }


  /**
   * Sets the value of the 'flightName' field.
   * The name of the flight
   * @param value the value to set.
   */
  public void setFlightName(java.lang.CharSequence value) {
    this.flightName = value;
  }

  /**
   * Gets the value of the 'gate' field.
   * @return The gate information
   */
  public java.lang.CharSequence getGate() {
    return gate;
  }


  /**
   * Sets the value of the 'gate' field.
   * The gate information
   * @param value the value to set.
   */
  public void setGate(java.lang.CharSequence value) {
    this.gate = value;
  }

  /**
   * Gets the value of the 'pier' field.
   * @return The pier information
   */
  public java.lang.CharSequence getPier() {
    return pier;
  }


  /**
   * Sets the value of the 'pier' field.
   * The pier information
   * @param value the value to set.
   */
  public void setPier(java.lang.CharSequence value) {
    this.pier = value;
  }

  /**
   * Gets the value of the 'id' field.
   * @return The id of the flight status record
   */
  public java.lang.CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * The id of the flight status record
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'isOperationalFlight' field.
   * @return The indicator for the flight type
   */
  public java.lang.CharSequence getIsOperationalFlight() {
    return isOperationalFlight;
  }


  /**
   * Sets the value of the 'isOperationalFlight' field.
   * The indicator for the flight type
   * @param value the value to set.
   */
  public void setIsOperationalFlight(java.lang.CharSequence value) {
    this.isOperationalFlight = value;
  }

  /**
   * Gets the value of the 'mainFlight' field.
   * @return The main flight information
   */
  public java.lang.CharSequence getMainFlight() {
    return mainFlight;
  }


  /**
   * Sets the value of the 'mainFlight' field.
   * The main flight information
   * @param value the value to set.
   */
  public void setMainFlight(java.lang.CharSequence value) {
    this.mainFlight = value;
  }

  /**
   * Gets the value of the 'prefixIATA' field.
   * @return The iata number
   */
  public java.lang.CharSequence getPrefixIATA() {
    return prefixIATA;
  }


  /**
   * Sets the value of the 'prefixIATA' field.
   * The iata number
   * @param value the value to set.
   */
  public void setPrefixIATA(java.lang.CharSequence value) {
    this.prefixIATA = value;
  }

  /**
   * Gets the value of the 'airlineCode' field.
   * @return The airline code
   */
  public int getAirlineCode() {
    return airlineCode;
  }


  /**
   * Sets the value of the 'airlineCode' field.
   * The airline code
   * @param value the value to set.
   */
  public void setAirlineCode(int value) {
    this.airlineCode = value;
  }

  /**
   * Gets the value of the 'route' field.
   * @return The route information
   */
  public io.flight.status.api.Route getRoute() {
    return route;
  }


  /**
   * Sets the value of the 'route' field.
   * The route information
   * @param value the value to set.
   */
  public void setRoute(io.flight.status.api.Route value) {
    this.route = value;
  }

  /**
   * Gets the value of the 'scheduleDateTime' field.
   * @return The scheduled date time information
   */
  public java.lang.CharSequence getScheduleDateTime() {
    return scheduleDateTime;
  }


  /**
   * Sets the value of the 'scheduleDateTime' field.
   * The scheduled date time information
   * @param value the value to set.
   */
  public void setScheduleDateTime(java.lang.CharSequence value) {
    this.scheduleDateTime = value;
  }

  /**
   * Gets the value of the 'scheduleDate' field.
   * @return The scheduled date information
   */
  public java.lang.CharSequence getScheduleDate() {
    return scheduleDate;
  }


  /**
   * Sets the value of the 'scheduleDate' field.
   * The scheduled date information
   * @param value the value to set.
   */
  public void setScheduleDate(java.lang.CharSequence value) {
    this.scheduleDate = value;
  }

  /**
   * Gets the value of the 'scheduleTime' field.
   * @return The scheduled time information
   */
  public java.lang.CharSequence getScheduleTime() {
    return scheduleTime;
  }


  /**
   * Sets the value of the 'scheduleTime' field.
   * The scheduled time information
   * @param value the value to set.
   */
  public void setScheduleTime(java.lang.CharSequence value) {
    this.scheduleTime = value;
  }

  /**
   * Creates a new Flight RecordBuilder.
   * @return A new Flight RecordBuilder
   */
  public static io.flight.status.producer.Flight.Builder newBuilder() {
    return new io.flight.status.producer.Flight.Builder();
  }

  /**
   * Creates a new Flight RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Flight RecordBuilder
   */
  public static io.flight.status.producer.Flight.Builder newBuilder(io.flight.status.producer.Flight.Builder other) {
    if (other == null) {
      return new io.flight.status.producer.Flight.Builder();
    } else {
      return new io.flight.status.producer.Flight.Builder(other);
    }
  }

  /**
   * Creates a new Flight RecordBuilder by copying an existing Flight instance.
   * @param other The existing instance to copy.
   * @return A new Flight RecordBuilder
   */
  public static io.flight.status.producer.Flight.Builder newBuilder(io.flight.status.producer.Flight other) {
    if (other == null) {
      return new io.flight.status.producer.Flight.Builder();
    } else {
      return new io.flight.status.producer.Flight.Builder(other);
    }
  }

  /**
   * RecordBuilder for Flight instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Flight>
    implements org.apache.avro.data.RecordBuilder<Flight> {

    /** The last updated date of the flight information */
    private java.lang.CharSequence lastUpdatedAt;
    /** The actual landing time of the flight */
    private java.lang.CharSequence actualLandingTime;
    /** The aircraft registration number */
    private java.lang.CharSequence aircraftRegistration;
    /** The aircraft type */
    private io.flight.status.producer.AircraftType AircraftType;
    private io.flight.status.producer.AircraftType.Builder AircraftTypeBuilder;
    /** The estimated landing time */
    private java.lang.CharSequence estimatedLandingTime;
    /** The direction of flight */
    private java.lang.CharSequence flightDirection;
    /** The name of the flight */
    private java.lang.CharSequence flightName;
    /** The gate information */
    private java.lang.CharSequence gate;
    /** The pier information */
    private java.lang.CharSequence pier;
    /** The id of the flight status record */
    private java.lang.CharSequence id;
    /** The indicator for the flight type */
    private java.lang.CharSequence isOperationalFlight;
    /** The main flight information */
    private java.lang.CharSequence mainFlight;
    /** The iata number */
    private java.lang.CharSequence prefixIATA;
    /** The airline code */
    private int airlineCode;
    /** The route information */
    private io.flight.status.api.Route route;
    private io.flight.status.api.Route.Builder routeBuilder;
    /** The scheduled date time information */
    private java.lang.CharSequence scheduleDateTime;
    /** The scheduled date information */
    private java.lang.CharSequence scheduleDate;
    /** The scheduled time information */
    private java.lang.CharSequence scheduleTime;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.flight.status.producer.Flight.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.lastUpdatedAt)) {
        this.lastUpdatedAt = data().deepCopy(fields()[0].schema(), other.lastUpdatedAt);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.actualLandingTime)) {
        this.actualLandingTime = data().deepCopy(fields()[1].schema(), other.actualLandingTime);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.aircraftRegistration)) {
        this.aircraftRegistration = data().deepCopy(fields()[2].schema(), other.aircraftRegistration);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.AircraftType)) {
        this.AircraftType = data().deepCopy(fields()[3].schema(), other.AircraftType);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (other.hasAircraftTypeBuilder()) {
        this.AircraftTypeBuilder = io.flight.status.producer.AircraftType.newBuilder(other.getAircraftTypeBuilder());
      }
      if (isValidValue(fields()[4], other.estimatedLandingTime)) {
        this.estimatedLandingTime = data().deepCopy(fields()[4].schema(), other.estimatedLandingTime);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.flightDirection)) {
        this.flightDirection = data().deepCopy(fields()[5].schema(), other.flightDirection);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.flightName)) {
        this.flightName = data().deepCopy(fields()[6].schema(), other.flightName);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.gate)) {
        this.gate = data().deepCopy(fields()[7].schema(), other.gate);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.pier)) {
        this.pier = data().deepCopy(fields()[8].schema(), other.pier);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.id)) {
        this.id = data().deepCopy(fields()[9].schema(), other.id);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.isOperationalFlight)) {
        this.isOperationalFlight = data().deepCopy(fields()[10].schema(), other.isOperationalFlight);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.mainFlight)) {
        this.mainFlight = data().deepCopy(fields()[11].schema(), other.mainFlight);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.prefixIATA)) {
        this.prefixIATA = data().deepCopy(fields()[12].schema(), other.prefixIATA);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.airlineCode)) {
        this.airlineCode = data().deepCopy(fields()[13].schema(), other.airlineCode);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.route)) {
        this.route = data().deepCopy(fields()[14].schema(), other.route);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (other.hasRouteBuilder()) {
        this.routeBuilder = io.flight.status.api.Route.newBuilder(other.getRouteBuilder());
      }
      if (isValidValue(fields()[15], other.scheduleDateTime)) {
        this.scheduleDateTime = data().deepCopy(fields()[15].schema(), other.scheduleDateTime);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
      if (isValidValue(fields()[16], other.scheduleDate)) {
        this.scheduleDate = data().deepCopy(fields()[16].schema(), other.scheduleDate);
        fieldSetFlags()[16] = other.fieldSetFlags()[16];
      }
      if (isValidValue(fields()[17], other.scheduleTime)) {
        this.scheduleTime = data().deepCopy(fields()[17].schema(), other.scheduleTime);
        fieldSetFlags()[17] = other.fieldSetFlags()[17];
      }
    }

    /**
     * Creates a Builder by copying an existing Flight instance
     * @param other The existing instance to copy.
     */
    private Builder(io.flight.status.producer.Flight other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.lastUpdatedAt)) {
        this.lastUpdatedAt = data().deepCopy(fields()[0].schema(), other.lastUpdatedAt);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.actualLandingTime)) {
        this.actualLandingTime = data().deepCopy(fields()[1].schema(), other.actualLandingTime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.aircraftRegistration)) {
        this.aircraftRegistration = data().deepCopy(fields()[2].schema(), other.aircraftRegistration);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.AircraftType)) {
        this.AircraftType = data().deepCopy(fields()[3].schema(), other.AircraftType);
        fieldSetFlags()[3] = true;
      }
      this.AircraftTypeBuilder = null;
      if (isValidValue(fields()[4], other.estimatedLandingTime)) {
        this.estimatedLandingTime = data().deepCopy(fields()[4].schema(), other.estimatedLandingTime);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.flightDirection)) {
        this.flightDirection = data().deepCopy(fields()[5].schema(), other.flightDirection);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.flightName)) {
        this.flightName = data().deepCopy(fields()[6].schema(), other.flightName);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.gate)) {
        this.gate = data().deepCopy(fields()[7].schema(), other.gate);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.pier)) {
        this.pier = data().deepCopy(fields()[8].schema(), other.pier);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.id)) {
        this.id = data().deepCopy(fields()[9].schema(), other.id);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.isOperationalFlight)) {
        this.isOperationalFlight = data().deepCopy(fields()[10].schema(), other.isOperationalFlight);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.mainFlight)) {
        this.mainFlight = data().deepCopy(fields()[11].schema(), other.mainFlight);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.prefixIATA)) {
        this.prefixIATA = data().deepCopy(fields()[12].schema(), other.prefixIATA);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.airlineCode)) {
        this.airlineCode = data().deepCopy(fields()[13].schema(), other.airlineCode);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.route)) {
        this.route = data().deepCopy(fields()[14].schema(), other.route);
        fieldSetFlags()[14] = true;
      }
      this.routeBuilder = null;
      if (isValidValue(fields()[15], other.scheduleDateTime)) {
        this.scheduleDateTime = data().deepCopy(fields()[15].schema(), other.scheduleDateTime);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.scheduleDate)) {
        this.scheduleDate = data().deepCopy(fields()[16].schema(), other.scheduleDate);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.scheduleTime)) {
        this.scheduleTime = data().deepCopy(fields()[17].schema(), other.scheduleTime);
        fieldSetFlags()[17] = true;
      }
    }

    /**
      * Gets the value of the 'lastUpdatedAt' field.
      * The last updated date of the flight information
      * @return The value.
      */
    public java.lang.CharSequence getLastUpdatedAt() {
      return lastUpdatedAt;
    }


    /**
      * Sets the value of the 'lastUpdatedAt' field.
      * The last updated date of the flight information
      * @param value The value of 'lastUpdatedAt'.
      * @return This builder.
      */
    public io.flight.status.producer.Flight.Builder setLastUpdatedAt(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.lastUpdatedAt = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'lastUpdatedAt' field has been set.
      * The last updated date of the flight information
      * @return True if the 'lastUpdatedAt' field has been set, false otherwise.
      */
    public boolean hasLastUpdatedAt() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'lastUpdatedAt' field.
      * The last updated date of the flight information
      * @return This builder.
      */
    public io.flight.status.producer.Flight.Builder clearLastUpdatedAt() {
      lastUpdatedAt = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'actualLandingTime' field.
      * The actual landing time of the flight
      * @return The value.
      */
    public java.lang.CharSequence getActualLandingTime() {
      return actualLandingTime;
    }


    /**
      * Sets the value of the 'actualLandingTime' field.
      * The actual landing time of the flight
      * @param value The value of 'actualLandingTime'.
      * @return This builder.
      */
    public io.flight.status.producer.Flight.Builder setActualLandingTime(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.actualLandingTime = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'actualLandingTime' field has been set.
      * The actual landing time of the flight
      * @return True if the 'actualLandingTime' field has been set, false otherwise.
      */
    public boolean hasActualLandingTime() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'actualLandingTime' field.
      * The actual landing time of the flight
      * @return This builder.
      */
    public io.flight.status.producer.Flight.Builder clearActualLandingTime() {
      actualLandingTime = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'aircraftRegistration' field.
      * The aircraft registration number
      * @return The value.
      */
    public java.lang.CharSequence getAircraftRegistration() {
      return aircraftRegistration;
    }


    /**
      * Sets the value of the 'aircraftRegistration' field.
      * The aircraft registration number
      * @param value The value of 'aircraftRegistration'.
      * @return This builder.
      */
    public io.flight.status.producer.Flight.Builder setAircraftRegistration(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.aircraftRegistration = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'aircraftRegistration' field has been set.
      * The aircraft registration number
      * @return True if the 'aircraftRegistration' field has been set, false otherwise.
      */
    public boolean hasAircraftRegistration() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'aircraftRegistration' field.
      * The aircraft registration number
      * @return This builder.
      */
    public io.flight.status.producer.Flight.Builder clearAircraftRegistration() {
      aircraftRegistration = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'AircraftType' field.
      * The aircraft type
      * @return The value.
      */
    public io.flight.status.producer.AircraftType getAircraftType() {
      return AircraftType;
    }


    /**
      * Sets the value of the 'AircraftType' field.
      * The aircraft type
      * @param value The value of 'AircraftType'.
      * @return This builder.
      */
    public io.flight.status.producer.Flight.Builder setAircraftType(io.flight.status.producer.AircraftType value) {
      validate(fields()[3], value);
      this.AircraftTypeBuilder = null;
      this.AircraftType = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'AircraftType' field has been set.
      * The aircraft type
      * @return True if the 'AircraftType' field has been set, false otherwise.
      */
    public boolean hasAircraftType() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'AircraftType' field and creates one if it doesn't exist yet.
     * The aircraft type
     * @return This builder.
     */
    public io.flight.status.producer.AircraftType.Builder getAircraftTypeBuilder() {
      if (AircraftTypeBuilder == null) {
        if (hasAircraftType()) {
          setAircraftTypeBuilder(io.flight.status.producer.AircraftType.newBuilder(AircraftType));
        } else {
          setAircraftTypeBuilder(io.flight.status.producer.AircraftType.newBuilder());
        }
      }
      return AircraftTypeBuilder;
    }

    /**
     * Sets the Builder instance for the 'AircraftType' field
     * The aircraft type
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public io.flight.status.producer.Flight.Builder setAircraftTypeBuilder(io.flight.status.producer.AircraftType.Builder value) {
      clearAircraftType();
      AircraftTypeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'AircraftType' field has an active Builder instance
     * The aircraft type
     * @return True if the 'AircraftType' field has an active Builder instance
     */
    public boolean hasAircraftTypeBuilder() {
      return AircraftTypeBuilder != null;
    }

    /**
      * Clears the value of the 'AircraftType' field.
      * The aircraft type
      * @return This builder.
      */
    public io.flight.status.producer.Flight.Builder clearAircraftType() {
      AircraftType = null;
      AircraftTypeBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'estimatedLandingTime' field.
      * The estimated landing time
      * @return The value.
      */
    public java.lang.CharSequence getEstimatedLandingTime() {
      return estimatedLandingTime;
    }


    /**
      * Sets the value of the 'estimatedLandingTime' field.
      * The estimated landing time
      * @param value The value of 'estimatedLandingTime'.
      * @return This builder.
      */
    public io.flight.status.producer.Flight.Builder setEstimatedLandingTime(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.estimatedLandingTime = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'estimatedLandingTime' field has been set.
      * The estimated landing time
      * @return True if the 'estimatedLandingTime' field has been set, false otherwise.
      */
    public boolean hasEstimatedLandingTime() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'estimatedLandingTime' field.
      * The estimated landing time
      * @return This builder.
      */
    public io.flight.status.producer.Flight.Builder clearEstimatedLandingTime() {
      estimatedLandingTime = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'flightDirection' field.
      * The direction of flight
      * @return The value.
      */
    public java.lang.CharSequence getFlightDirection() {
      return flightDirection;
    }


    /**
      * Sets the value of the 'flightDirection' field.
      * The direction of flight
      * @param value The value of 'flightDirection'.
      * @return This builder.
      */
    public io.flight.status.producer.Flight.Builder setFlightDirection(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.flightDirection = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'flightDirection' field has been set.
      * The direction of flight
      * @return True if the 'flightDirection' field has been set, false otherwise.
      */
    public boolean hasFlightDirection() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'flightDirection' field.
      * The direction of flight
      * @return This builder.
      */
    public io.flight.status.producer.Flight.Builder clearFlightDirection() {
      flightDirection = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'flightName' field.
      * The name of the flight
      * @return The value.
      */
    public java.lang.CharSequence getFlightName() {
      return flightName;
    }


    /**
      * Sets the value of the 'flightName' field.
      * The name of the flight
      * @param value The value of 'flightName'.
      * @return This builder.
      */
    public io.flight.status.producer.Flight.Builder setFlightName(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.flightName = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'flightName' field has been set.
      * The name of the flight
      * @return True if the 'flightName' field has been set, false otherwise.
      */
    public boolean hasFlightName() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'flightName' field.
      * The name of the flight
      * @return This builder.
      */
    public io.flight.status.producer.Flight.Builder clearFlightName() {
      flightName = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'gate' field.
      * The gate information
      * @return The value.
      */
    public java.lang.CharSequence getGate() {
      return gate;
    }


    /**
      * Sets the value of the 'gate' field.
      * The gate information
      * @param value The value of 'gate'.
      * @return This builder.
      */
    public io.flight.status.producer.Flight.Builder setGate(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.gate = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'gate' field has been set.
      * The gate information
      * @return True if the 'gate' field has been set, false otherwise.
      */
    public boolean hasGate() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'gate' field.
      * The gate information
      * @return This builder.
      */
    public io.flight.status.producer.Flight.Builder clearGate() {
      gate = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'pier' field.
      * The pier information
      * @return The value.
      */
    public java.lang.CharSequence getPier() {
      return pier;
    }


    /**
      * Sets the value of the 'pier' field.
      * The pier information
      * @param value The value of 'pier'.
      * @return This builder.
      */
    public io.flight.status.producer.Flight.Builder setPier(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.pier = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'pier' field has been set.
      * The pier information
      * @return True if the 'pier' field has been set, false otherwise.
      */
    public boolean hasPier() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'pier' field.
      * The pier information
      * @return This builder.
      */
    public io.flight.status.producer.Flight.Builder clearPier() {
      pier = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'id' field.
      * The id of the flight status record
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * The id of the flight status record
      * @param value The value of 'id'.
      * @return This builder.
      */
    public io.flight.status.producer.Flight.Builder setId(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.id = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * The id of the flight status record
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'id' field.
      * The id of the flight status record
      * @return This builder.
      */
    public io.flight.status.producer.Flight.Builder clearId() {
      id = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'isOperationalFlight' field.
      * The indicator for the flight type
      * @return The value.
      */
    public java.lang.CharSequence getIsOperationalFlight() {
      return isOperationalFlight;
    }


    /**
      * Sets the value of the 'isOperationalFlight' field.
      * The indicator for the flight type
      * @param value The value of 'isOperationalFlight'.
      * @return This builder.
      */
    public io.flight.status.producer.Flight.Builder setIsOperationalFlight(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.isOperationalFlight = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'isOperationalFlight' field has been set.
      * The indicator for the flight type
      * @return True if the 'isOperationalFlight' field has been set, false otherwise.
      */
    public boolean hasIsOperationalFlight() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'isOperationalFlight' field.
      * The indicator for the flight type
      * @return This builder.
      */
    public io.flight.status.producer.Flight.Builder clearIsOperationalFlight() {
      isOperationalFlight = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'mainFlight' field.
      * The main flight information
      * @return The value.
      */
    public java.lang.CharSequence getMainFlight() {
      return mainFlight;
    }


    /**
      * Sets the value of the 'mainFlight' field.
      * The main flight information
      * @param value The value of 'mainFlight'.
      * @return This builder.
      */
    public io.flight.status.producer.Flight.Builder setMainFlight(java.lang.CharSequence value) {
      validate(fields()[11], value);
      this.mainFlight = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'mainFlight' field has been set.
      * The main flight information
      * @return True if the 'mainFlight' field has been set, false otherwise.
      */
    public boolean hasMainFlight() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'mainFlight' field.
      * The main flight information
      * @return This builder.
      */
    public io.flight.status.producer.Flight.Builder clearMainFlight() {
      mainFlight = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'prefixIATA' field.
      * The iata number
      * @return The value.
      */
    public java.lang.CharSequence getPrefixIATA() {
      return prefixIATA;
    }


    /**
      * Sets the value of the 'prefixIATA' field.
      * The iata number
      * @param value The value of 'prefixIATA'.
      * @return This builder.
      */
    public io.flight.status.producer.Flight.Builder setPrefixIATA(java.lang.CharSequence value) {
      validate(fields()[12], value);
      this.prefixIATA = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'prefixIATA' field has been set.
      * The iata number
      * @return True if the 'prefixIATA' field has been set, false otherwise.
      */
    public boolean hasPrefixIATA() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'prefixIATA' field.
      * The iata number
      * @return This builder.
      */
    public io.flight.status.producer.Flight.Builder clearPrefixIATA() {
      prefixIATA = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'airlineCode' field.
      * The airline code
      * @return The value.
      */
    public int getAirlineCode() {
      return airlineCode;
    }


    /**
      * Sets the value of the 'airlineCode' field.
      * The airline code
      * @param value The value of 'airlineCode'.
      * @return This builder.
      */
    public io.flight.status.producer.Flight.Builder setAirlineCode(int value) {
      validate(fields()[13], value);
      this.airlineCode = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'airlineCode' field has been set.
      * The airline code
      * @return True if the 'airlineCode' field has been set, false otherwise.
      */
    public boolean hasAirlineCode() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'airlineCode' field.
      * The airline code
      * @return This builder.
      */
    public io.flight.status.producer.Flight.Builder clearAirlineCode() {
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'route' field.
      * The route information
      * @return The value.
      */
    public io.flight.status.api.Route getRoute() {
      return route;
    }


    /**
      * Sets the value of the 'route' field.
      * The route information
      * @param value The value of 'route'.
      * @return This builder.
      */
    public io.flight.status.producer.Flight.Builder setRoute(io.flight.status.api.Route value) {
      validate(fields()[14], value);
      this.routeBuilder = null;
      this.route = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'route' field has been set.
      * The route information
      * @return True if the 'route' field has been set, false otherwise.
      */
    public boolean hasRoute() {
      return fieldSetFlags()[14];
    }

    /**
     * Gets the Builder instance for the 'route' field and creates one if it doesn't exist yet.
     * The route information
     * @return This builder.
     */
    public io.flight.status.api.Route.Builder getRouteBuilder() {
      if (routeBuilder == null) {
        if (hasRoute()) {
          setRouteBuilder(io.flight.status.api.Route.newBuilder(route));
        } else {
          setRouteBuilder(io.flight.status.api.Route.newBuilder());
        }
      }
      return routeBuilder;
    }

    /**
     * Sets the Builder instance for the 'route' field
     * The route information
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public io.flight.status.producer.Flight.Builder setRouteBuilder(io.flight.status.api.Route.Builder value) {
      clearRoute();
      routeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'route' field has an active Builder instance
     * The route information
     * @return True if the 'route' field has an active Builder instance
     */
    public boolean hasRouteBuilder() {
      return routeBuilder != null;
    }

    /**
      * Clears the value of the 'route' field.
      * The route information
      * @return This builder.
      */
    public io.flight.status.producer.Flight.Builder clearRoute() {
      route = null;
      routeBuilder = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'scheduleDateTime' field.
      * The scheduled date time information
      * @return The value.
      */
    public java.lang.CharSequence getScheduleDateTime() {
      return scheduleDateTime;
    }


    /**
      * Sets the value of the 'scheduleDateTime' field.
      * The scheduled date time information
      * @param value The value of 'scheduleDateTime'.
      * @return This builder.
      */
    public io.flight.status.producer.Flight.Builder setScheduleDateTime(java.lang.CharSequence value) {
      validate(fields()[15], value);
      this.scheduleDateTime = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'scheduleDateTime' field has been set.
      * The scheduled date time information
      * @return True if the 'scheduleDateTime' field has been set, false otherwise.
      */
    public boolean hasScheduleDateTime() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'scheduleDateTime' field.
      * The scheduled date time information
      * @return This builder.
      */
    public io.flight.status.producer.Flight.Builder clearScheduleDateTime() {
      scheduleDateTime = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'scheduleDate' field.
      * The scheduled date information
      * @return The value.
      */
    public java.lang.CharSequence getScheduleDate() {
      return scheduleDate;
    }


    /**
      * Sets the value of the 'scheduleDate' field.
      * The scheduled date information
      * @param value The value of 'scheduleDate'.
      * @return This builder.
      */
    public io.flight.status.producer.Flight.Builder setScheduleDate(java.lang.CharSequence value) {
      validate(fields()[16], value);
      this.scheduleDate = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'scheduleDate' field has been set.
      * The scheduled date information
      * @return True if the 'scheduleDate' field has been set, false otherwise.
      */
    public boolean hasScheduleDate() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'scheduleDate' field.
      * The scheduled date information
      * @return This builder.
      */
    public io.flight.status.producer.Flight.Builder clearScheduleDate() {
      scheduleDate = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'scheduleTime' field.
      * The scheduled time information
      * @return The value.
      */
    public java.lang.CharSequence getScheduleTime() {
      return scheduleTime;
    }


    /**
      * Sets the value of the 'scheduleTime' field.
      * The scheduled time information
      * @param value The value of 'scheduleTime'.
      * @return This builder.
      */
    public io.flight.status.producer.Flight.Builder setScheduleTime(java.lang.CharSequence value) {
      validate(fields()[17], value);
      this.scheduleTime = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'scheduleTime' field has been set.
      * The scheduled time information
      * @return True if the 'scheduleTime' field has been set, false otherwise.
      */
    public boolean hasScheduleTime() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'scheduleTime' field.
      * The scheduled time information
      * @return This builder.
      */
    public io.flight.status.producer.Flight.Builder clearScheduleTime() {
      scheduleTime = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Flight build() {
      try {
        Flight record = new Flight();
        record.lastUpdatedAt = fieldSetFlags()[0] ? this.lastUpdatedAt : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.actualLandingTime = fieldSetFlags()[1] ? this.actualLandingTime : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.aircraftRegistration = fieldSetFlags()[2] ? this.aircraftRegistration : (java.lang.CharSequence) defaultValue(fields()[2]);
        if (AircraftTypeBuilder != null) {
          try {
            record.AircraftType = this.AircraftTypeBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("AircraftType"));
            throw e;
          }
        } else {
          record.AircraftType = fieldSetFlags()[3] ? this.AircraftType : (io.flight.status.producer.AircraftType) defaultValue(fields()[3]);
        }
        record.estimatedLandingTime = fieldSetFlags()[4] ? this.estimatedLandingTime : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.flightDirection = fieldSetFlags()[5] ? this.flightDirection : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.flightName = fieldSetFlags()[6] ? this.flightName : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.gate = fieldSetFlags()[7] ? this.gate : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.pier = fieldSetFlags()[8] ? this.pier : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.id = fieldSetFlags()[9] ? this.id : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.isOperationalFlight = fieldSetFlags()[10] ? this.isOperationalFlight : (java.lang.CharSequence) defaultValue(fields()[10]);
        record.mainFlight = fieldSetFlags()[11] ? this.mainFlight : (java.lang.CharSequence) defaultValue(fields()[11]);
        record.prefixIATA = fieldSetFlags()[12] ? this.prefixIATA : (java.lang.CharSequence) defaultValue(fields()[12]);
        record.airlineCode = fieldSetFlags()[13] ? this.airlineCode : (java.lang.Integer) defaultValue(fields()[13]);
        if (routeBuilder != null) {
          try {
            record.route = this.routeBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("route"));
            throw e;
          }
        } else {
          record.route = fieldSetFlags()[14] ? this.route : (io.flight.status.api.Route) defaultValue(fields()[14]);
        }
        record.scheduleDateTime = fieldSetFlags()[15] ? this.scheduleDateTime : (java.lang.CharSequence) defaultValue(fields()[15]);
        record.scheduleDate = fieldSetFlags()[16] ? this.scheduleDate : (java.lang.CharSequence) defaultValue(fields()[16]);
        record.scheduleTime = fieldSetFlags()[17] ? this.scheduleTime : (java.lang.CharSequence) defaultValue(fields()[17]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Flight>
    WRITER$ = (org.apache.avro.io.DatumWriter<Flight>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Flight>
    READER$ = (org.apache.avro.io.DatumReader<Flight>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.lastUpdatedAt == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.lastUpdatedAt);
    }

    if (this.actualLandingTime == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.actualLandingTime);
    }

    if (this.aircraftRegistration == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.aircraftRegistration);
    }

    this.AircraftType.customEncode(out);

    if (this.estimatedLandingTime == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.estimatedLandingTime);
    }

    if (this.flightDirection == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.flightDirection);
    }

    if (this.flightName == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.flightName);
    }

    if (this.gate == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.gate);
    }

    if (this.pier == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.pier);
    }

    if (this.id == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.id);
    }

    if (this.isOperationalFlight == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.isOperationalFlight);
    }

    if (this.mainFlight == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.mainFlight);
    }

    if (this.prefixIATA == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.prefixIATA);
    }

    out.writeInt(this.airlineCode);

    this.route.customEncode(out);

    if (this.scheduleDateTime == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.scheduleDateTime);
    }

    if (this.scheduleDate == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.scheduleDate);
    }

    if (this.scheduleTime == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.scheduleTime);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.lastUpdatedAt = null;
      } else {
        this.lastUpdatedAt = in.readString(this.lastUpdatedAt instanceof Utf8 ? (Utf8)this.lastUpdatedAt : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.actualLandingTime = null;
      } else {
        this.actualLandingTime = in.readString(this.actualLandingTime instanceof Utf8 ? (Utf8)this.actualLandingTime : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.aircraftRegistration = null;
      } else {
        this.aircraftRegistration = in.readString(this.aircraftRegistration instanceof Utf8 ? (Utf8)this.aircraftRegistration : null);
      }

      if (this.AircraftType == null) {
        this.AircraftType = new io.flight.status.producer.AircraftType();
      }
      this.AircraftType.customDecode(in);

      if (in.readIndex() != 1) {
        in.readNull();
        this.estimatedLandingTime = null;
      } else {
        this.estimatedLandingTime = in.readString(this.estimatedLandingTime instanceof Utf8 ? (Utf8)this.estimatedLandingTime : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.flightDirection = null;
      } else {
        this.flightDirection = in.readString(this.flightDirection instanceof Utf8 ? (Utf8)this.flightDirection : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.flightName = null;
      } else {
        this.flightName = in.readString(this.flightName instanceof Utf8 ? (Utf8)this.flightName : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.gate = null;
      } else {
        this.gate = in.readString(this.gate instanceof Utf8 ? (Utf8)this.gate : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.pier = null;
      } else {
        this.pier = in.readString(this.pier instanceof Utf8 ? (Utf8)this.pier : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.id = null;
      } else {
        this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.isOperationalFlight = null;
      } else {
        this.isOperationalFlight = in.readString(this.isOperationalFlight instanceof Utf8 ? (Utf8)this.isOperationalFlight : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.mainFlight = null;
      } else {
        this.mainFlight = in.readString(this.mainFlight instanceof Utf8 ? (Utf8)this.mainFlight : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.prefixIATA = null;
      } else {
        this.prefixIATA = in.readString(this.prefixIATA instanceof Utf8 ? (Utf8)this.prefixIATA : null);
      }

      this.airlineCode = in.readInt();

      if (this.route == null) {
        this.route = new io.flight.status.api.Route();
      }
      this.route.customDecode(in);

      if (in.readIndex() != 1) {
        in.readNull();
        this.scheduleDateTime = null;
      } else {
        this.scheduleDateTime = in.readString(this.scheduleDateTime instanceof Utf8 ? (Utf8)this.scheduleDateTime : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.scheduleDate = null;
      } else {
        this.scheduleDate = in.readString(this.scheduleDate instanceof Utf8 ? (Utf8)this.scheduleDate : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.scheduleTime = null;
      } else {
        this.scheduleTime = in.readString(this.scheduleTime instanceof Utf8 ? (Utf8)this.scheduleTime : null);
      }

    } else {
      for (int i = 0; i < 18; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.lastUpdatedAt = null;
          } else {
            this.lastUpdatedAt = in.readString(this.lastUpdatedAt instanceof Utf8 ? (Utf8)this.lastUpdatedAt : null);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.actualLandingTime = null;
          } else {
            this.actualLandingTime = in.readString(this.actualLandingTime instanceof Utf8 ? (Utf8)this.actualLandingTime : null);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.aircraftRegistration = null;
          } else {
            this.aircraftRegistration = in.readString(this.aircraftRegistration instanceof Utf8 ? (Utf8)this.aircraftRegistration : null);
          }
          break;

        case 3:
          if (this.AircraftType == null) {
            this.AircraftType = new io.flight.status.producer.AircraftType();
          }
          this.AircraftType.customDecode(in);
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.estimatedLandingTime = null;
          } else {
            this.estimatedLandingTime = in.readString(this.estimatedLandingTime instanceof Utf8 ? (Utf8)this.estimatedLandingTime : null);
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.flightDirection = null;
          } else {
            this.flightDirection = in.readString(this.flightDirection instanceof Utf8 ? (Utf8)this.flightDirection : null);
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.flightName = null;
          } else {
            this.flightName = in.readString(this.flightName instanceof Utf8 ? (Utf8)this.flightName : null);
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.gate = null;
          } else {
            this.gate = in.readString(this.gate instanceof Utf8 ? (Utf8)this.gate : null);
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.pier = null;
          } else {
            this.pier = in.readString(this.pier instanceof Utf8 ? (Utf8)this.pier : null);
          }
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.id = null;
          } else {
            this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
          }
          break;

        case 10:
          if (in.readIndex() != 1) {
            in.readNull();
            this.isOperationalFlight = null;
          } else {
            this.isOperationalFlight = in.readString(this.isOperationalFlight instanceof Utf8 ? (Utf8)this.isOperationalFlight : null);
          }
          break;

        case 11:
          if (in.readIndex() != 1) {
            in.readNull();
            this.mainFlight = null;
          } else {
            this.mainFlight = in.readString(this.mainFlight instanceof Utf8 ? (Utf8)this.mainFlight : null);
          }
          break;

        case 12:
          if (in.readIndex() != 1) {
            in.readNull();
            this.prefixIATA = null;
          } else {
            this.prefixIATA = in.readString(this.prefixIATA instanceof Utf8 ? (Utf8)this.prefixIATA : null);
          }
          break;

        case 13:
          this.airlineCode = in.readInt();
          break;

        case 14:
          if (this.route == null) {
            this.route = new io.flight.status.api.Route();
          }
          this.route.customDecode(in);
          break;

        case 15:
          if (in.readIndex() != 1) {
            in.readNull();
            this.scheduleDateTime = null;
          } else {
            this.scheduleDateTime = in.readString(this.scheduleDateTime instanceof Utf8 ? (Utf8)this.scheduleDateTime : null);
          }
          break;

        case 16:
          if (in.readIndex() != 1) {
            in.readNull();
            this.scheduleDate = null;
          } else {
            this.scheduleDate = in.readString(this.scheduleDate instanceof Utf8 ? (Utf8)this.scheduleDate : null);
          }
          break;

        case 17:
          if (in.readIndex() != 1) {
            in.readNull();
            this.scheduleTime = null;
          } else {
            this.scheduleTime = in.readString(this.scheduleTime instanceof Utf8 ? (Utf8)this.scheduleTime : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










